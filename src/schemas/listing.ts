import { z } from 'zod'
import {
  listingAdvertSchema,
  listingAgentSchema,
  listingEventSchema,
  listingExtendedImageSchema,
  listingExtendedPropertySchema,
  listingSolicitorSchema,
  listingUserSchema,
  rexEnumSchema,
} from './common'

export const listingResponseSchema = z.object({
  result: z.object({
    authority_date_expires: z.string(),
    authority_date_start: z.string(),
    authority_duration_days: z.number(),
    available_from_date: z.string().nullable(),
    baseline_price: z.string().nullable(),
    comm_amount_fixed: z.number().nullable(),
    comm_amount_percentage: z.number().nullable(),
    comm_base_amount_override: z.string().nullable(),
    comm_est_amount_inc_tax: z.number().nullable(),
    comm_est_amount_net_of_tax: z.number().nullable(),
    comm_est_based_on_amount: z.string(),
    comm_est_based_on_object_id: z.string(),
    comm_est_based_on_service: z.string(),
    comm_is_inc_tax: z.number().nullable(),
    etag: z.string(),
    feedback_notes: z.string().nullable(),
    feedback_offer_level: z.string().nullable(),
    feedback_price_rank: z.string().nullable(),
    id: z.number(),
    image_cycling_delay_in_hours: z.string().nullable(),
    image_cycling_delayed_until: z.string().nullable(),
    inbound_last_update: z.string().nullable(),
    inbound_unique_id: z.string().nullable(),
    inspection_alarm_code: z.string().nullable(),
    inspection_notes: z.string().nullable(),
    is_multiple: z.string().nullable(),
    legal_prop_address: z.string().nullable(),
    legal_prop_lot: z.string().nullable(),
    legal_prop_subdivision: z.string().nullable(),
    legal_prop_titleref: z.string().nullable(),
    legal_vendor_name: z.string().nullable(),
    legal_vendor_residence: z.string().nullable(),
    let_agreed: z.string().nullable(),
    meta_highlight_1: z.string().nullable(),
    meta_highlight_2: z.string().nullable(),
    meta_highlight_3: z.string().nullable(),
    meta_other_features: z.string().nullable(),
    new_home: z.number().nullable(),
    outgoings_annual: z.string().nullable(),
    outgoings_rent_is_plus: z.string().nullable(),
    parent_listing_id: z.string().nullable(),
    price_advertise_as: z.string(),
    price_bond: z.string().nullable(),
    price_est_rent_pw: z.string().nullable(),
    price_match_max_sale: z.string().nullable(),
    price_match_max: z.string().nullable(),
    price_match_rent_max_pa_inc_tax: z.string().nullable(),
    price_match_rent_pa_inc_tax: z.string().nullable(),
    price_match_sale: z.number(),
    price_match: z.number(),
    price_rent_max_per_m2: z.string().nullable(),
    price_rent_max: z.string().nullable(),
    price_rent_per_m2: z.string().nullable(),
    price_rent: z.string().nullable(),
    publish_to_automatch: z.boolean(),
    publish_to_external: z.boolean(),
    publish_to_general: z.boolean(),
    publish_to_portals: z.boolean(),
    state_change_timestamp: z.string().nullable(),
    state_date: z.string().nullable(),
    state_lost_agency_id: z.string().nullable(),
    state_reason_id: z.string().nullable(),
    state_reason_note: z.string().nullable(),
    state_value_deposit: z.string().nullable(),
    state_value_price_rent_period_id: z.string().nullable(),
    state_value_price: z.string().nullable(),
    status_is_not_for_sale: z.string().nullable(),
    system_ctime: z.number(),
    system_has_preupload_errors: z.string().nullable(),
    system_listing_state: z.string(),
    system_modtime: z.number(),
    system_overpayment_balance: z.string().nullable(),
    system_publication_status: z.string(),
    system_publication_time: z.number(),
    system_publication_user_id: z.number(),
    system_owner_user: listingUserSchema,
    system_modified_user: listingUserSchema,
    system_created_user: listingUserSchema,
    listing_agent_1: listingAgentSchema,
    listing_agent_2: listingAgentSchema,
    legal_solicitor: listingSolicitorSchema,
    legal_solicitor_contact: z.string().nullable(),
    project_stage: rexEnumSchema,
    location: rexEnumSchema,
    authority_type: rexEnumSchema,
    exclusivity: z.string().nullable(),
    inspection_type: z.string().nullable(),
    listing_category: rexEnumSchema,
    price_rent_period: z.string().nullable(),
    price_rent_tax: z.string().nullable(),
    comm_structure: rexEnumSchema,
    comm_amount_model: rexEnumSchema,
    tenancy_type: rexEnumSchema,
    lead_auto_response_template: z.string().nullable(),
    property: listingExtendedPropertySchema,
    related: z
      .object({
        property_features: z.array(z.unknown()),
        property_views: z.array(z.unknown()),
        property_tags: z.array(z.unknown()),
        contact_reln_listing: z.array(
          z.object({
            do_not_contact: z.string().nullable(),
            id: z.number(),
            reln_type: rexEnumSchema,
            contact: z.object({
              address_postal: z.string(),
              address: z.string(),
              contact_image: z.string().nullable(),
              email_address: z.string(),
              etag: z.string(),
              fax_number: z.string().nullable(),
              id: z.string(),
              interest_level: z.string().nullable(),
              is_dnd: z.string().nullable(),
              last_contacted_date: z.string(),
              marketing_birthday: z.string().nullable(),
              marketing_enquiry_method: z.string().nullable(),
              marketing_enquiry_source: z.string().nullable(),
              marketing_gender: z.string().nullable(),
              marketing_postcode: z.string().nullable(),
              name_addressee: z.string(),
              name_first: z.string(),
              name_last: z.string(),
              name_legal: z.string(),
              name_salutation: z.string(),
              name: z.string(),
              phone_number: z.string(),
              system_ctime: z.string(),
              system_modtime: z.string(),
              system_owner_user: listingUserSchema,
              system_record_state: z.string(),
              type: z.string(),
            }),
          })
        ),
        listing_idealfors: z.array(z.unknown()),
        listing_allowances: z.array(z.unknown()),
        listing_adverts: z.array(listingAdvertSchema),
        listing_events: z.array(listingEventSchema),
        listing_images: z.array(listingExtendedImageSchema),
        listing_documents: z.array(
          z.object({
            system_ctime: z.number(),
            system_modtime: z.number(),
            system_size_mb: z.number(),
            description: z.string(),
            uri: z.string(),
            upload_date: z.string().nullable(),
            show_in_open_homes: z.string().nullable(),
            id: z.number(),
            system_modified_user: listingUserSchema,
            system_created_user: listingUserSchema,
            type: rexEnumSchema,
            privacy: rexEnumSchema,
            url: z.string(),
          })
        ),
        listing_floorplans: z.array(listingExtendedImageSchema),
        listing_holidaybookings: z.array(z.unknown()),
        listing_links: z.array(
          z.object({
            link_type: z.string(),
            link_url: z.string(),
            id: z.number(),
          })
        ),
        listing_subcategories: z.array(
          z.object({
            priority: z.number(),
            id: z.number(),
            subcategory: rexEnumSchema,
          })
        ),
      })
      .optional(),
    security_user_rights: z.array(z.string()),
  }),
  error: z.null(),
})

export type ListingResponse = z.infer<typeof listingResponseSchema>
